#!/bin/bash
(set -o igncr) 2>/dev/null && set -o igncr; # cygwin specific shell options

#     ____     __   __        ____
#    / __/__  / /__/ /__ ____/ __/_ _____  ____
#   / _// _ \/ / _  / -_) __/\ \/ // / _ \/ __/
#  /_/  \___/_/\_,_/\__/_/ /___/\_, /_//_/\__/
#                              /___/

## set trap commands
#trap clean SIGINT SIGTERM
#trap "exit" INT TERM ERR
#trap "kill 0" EXIT # terminated all jobs on exit

###########################
# functions
###########################

#function catchStdErr2() {
#    local -n v="$1";
#    shift && { v="$("$@" 2>&1 1>&3 3>&-)"; } 3>&1;
#    echo "$v"
#}

function catchStdErr() {
    local err=''
    { err="$("$@" 2>&1 1>&3 3>&-)"; } 3>&1

    if [[ "$err" != '' ]]
    then
        echo "$err"
        return 1
    else
        return 0
    fi
}

function usage() {
    [[ "$1" = "" ]] || echo -e "\n\t${r}ERROR: \"$1\" is a required argument but is missing or is invalid${s}"
    echo -e "Usage: folder-sync start | stop [options]

        Options:
        <-s | --source>  <-d | --dest>  <-u | --user>  <-p | --password>
        [-m | --marker] [-R] [-v] [-q] [-b]
        Type 'folder-sync --help' for more information."
    exit 2
}

function help {
   echo -e "${s}

    Description:
        Connect to an FTP directory and downloads all new files as per the provided options.

        Note that there are three ways for identifying \"new\" files:
            1. Any file newer that the last file downloaded in the destination directory
            2. Any file newer than the script start time if there are no files in the destination directory
            3. Any file newer than the time marker provided with the -m option e.g. -m \"yesterday\"
                see GNU documentation for all accepted time formats:
                https://www.gnu.org/software/coreutils/manual/html_node/Date-input-formats.html#Date-input-formats

        To continuously download new files, use the -b option

    Commands:
        start   execute the script
        stop    stop the background process (applicable only for -b option)

    Required:
        -s , --source     set the FTP source URL along with the path i.e. \"ftp://192.168.1.1/ftp/root/files\"
        -d , --dest       set the destination directory
        -u , --user       set user name

    Optional:
        -p , --password   set the password. If omitted, the script will ask for it on the console
        -m , --marker     custom cut-off time marker
        -l , --logfile    log file
        -L , --level   specify log level from 0 to 4: (0) silent; (1) error; (3) warn; (2) info; (4) verbose
        -R                when provided will delete the file from the source location
        -O                force overwrite when file with the same name already exists
                              (by default will overwrite only when the files have same size and modify dates)
        -k                never overwrite when file with the same name already exists
        -v                show verbose output
        -q                don't show any output
        -b                run in the background"
  exit 0
}

# shellcheck disable=SC2034
parseArgs() {
    declare -n cmdargs=$1
    declare -n argsmap=$2

    local flags="kOhvqRb:s:d:u:p:m:l:L:"
    local long="start,stop,help,source:,dest:,user:,password:,marker:logfile:,level:"

    parsed=$(getopt -a -n folder_sync -o "$flags" --long "$long" -- "${cmdargs[@]}")
    [[ $? -ne 0 ]] && usage

    eval set -- "$parsed"
    while :
    do
      case "$1" in
        # flags
        -R ) argsmap[REM_FILE]="y"     ; shift ;;
        -O ) argsmap[KEEP]="n"         ; shift ;;
        -k ) argsmap[KEEP]="y"         ; shift ;;
        -v ) argsmap[LEVEL]=3          ; shift ;;
        -q ) argsmap[LEVEL]=0          ; shift ;;
        --start ) argsmap[CMD]="START" ; shift ;;
        --stop ) stop ;;

        # options
        -h | --help) help ;;
        -s | --source)   argsmap[URL]=$2     ; shift 2 ;;
        -d | --dest)     argsmap[OUT_DIR]=$2 ; shift 2 ;;
        -u | --user)     argsmap[USER]=$2    ; shift 2 ;;
        -p | --password) argsmap[PWD]=$2     ; shift 2 ;;
        -l | --logfile)  argsmap[LOG]=$2     ; shift 2 ;;
        -L | --loglevel) argsmap[LEVEL]=$2   ; shift 2 ;;
        -m | --marker)   argsmap[MARKER]=$(date -d "$2" '+%s'); shift 2 ;;
        -b ) argsmap[SERVICE]=1; argsmap[SLEEP]=$2; shift 2 ;;
        --) shift; break ;;
        * ) echo "Unexpected option: $1" ; usage ;;
      esac
    done
}

function stop {
    if [[ "$(uname)" = "Linux" ]]
    then
        killall -r folder-sync
    else
        #cygwin
        CYG_PID="$(procps -wwFAH | grep -v "grep" | grep "folder-sync"  | tr -s ' ' | cut -d ' ' -f 2)"
        echo -e "Stopping CYGWIN PID(s)"
        echo "$CYG_PID"
        kill -s SIGTERM "$CYG_PID" 2>&1 /dev/null
    fi
}

#Cleanup on kill
function clean() {
    echo -F -e "${r}Download failed! ERROR is [$1]${s}"
    kill 0
    rm -Rf "$OUT_DIR/wrk"
    exit 1
}

#function runJob() {
#    local job_pid=$1
#    ({
#        local err
#        shift && { err="$("$@" 2>&1 1>&3 3>&-)"; } 3>&1;
#        echo "$err"
#        [[ "$err" != '' ]] && { echo "$err"; return 1; }
#    }  ) &
#
#    eval "$job_pid"="$!"
#    return
#}

function getPassword() {
    local pwd="$1"
    local password

    echo -n "Enter password: "
    while IFS= read -p "$prompt" -r -s -n 1 char
    do
        if [[ $char == $'\0' ]] ; then break; fi

        # handle backspace
        if [[ $char == $'\177' ]] ; then
            prompt=$'\b \b'
            password="${password%?}"
        else
            prompt='*'
            password+="$char"
        fi
    done

    eval "$pwd"="$password"
    echo
}

# returns the last modified time for the file provided in the URL
function getModDate() {
    local dt=$(curl -s -I -u "$USER:$PWD" "$1" 2>&1 | awk '/Last-Modified:/ {sub("\r",""); print  $2,$3,$4,$5,$6,$7}')
    echo "$(date -d "${dt}" '+%s')" # convert to ms
}

function getTimeMarker() {
    local latest=$(find "$1" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d ' ' -f 1)

    if [[ -z ${latest+_} ]]; then
      echo "$(date '+%s')"
    else
      echo "$(date -d "@$latest" '+%s')"
    fi
}

# get the file details and parse the size
function getSize() {
    local size="$(curl -u "$USER:$PWD" -qIL "$1" 2> /dev/null | awk '/Length/ {print $2}'|grep -o '[0-9]*')"
    local size=${size:-1}
    echo "$size"
}

# takes an array reference and updates it with the file names in the given directory
function getDirectoryContent() {
    local -n arr=$1
    local url="$2"

    # todo error checking & reporting

    # shellcheck disable=SC2207    #suppressed as globbing is fine in this case
    arr=($(curl -s -u "$USER:$PWD" "$url/" | \
        sed -nr 's/(^-[ rw-].*)( *)([0-9])(.*)/\4/p' | \
        sed -e 's/^ //g' | sed -e 's/ /\ /g'))

    echo -D "Found ${#arr[@]} files in $url"
    return 0
}

# filters out any files that are older than the cutoff time
function getNewFiles() {
    local -n newer=$1
    local url=$2
    local cutoff=$3
    local lmd

    # shellcheck disable=SC2068  # gobbling needs to be enabled for the loop
    for f in ${newer[@]}; do
        lmd=$(getModDate "$url/$f")
        [[ -n "$lmd" ]] || continue
        if [[ "$cutoff" -ge "$lmd" ]]; then
            echo -I -e "(-) $f is old - skipped"
            newer=("${newer[@]/$f}") # remove old file
        else
            echo -W -e "(+) $f is newer - downloading"
        fi
    done

    echo -D "Found ${#newer[@]} files newer than $(date -d @"$cutoff")"
    return 0 # needed to avoid interpreting the echo as an non-zero return code i.e. an error code
}

function showProgress() {
    local action="$1"
    local directory="$2"
    local file_name="$3"
    local chunks="$4"
    local total_size="$5"
    local time="$6"
    local err="$7"

    local kb=1024; local mb=1048576; local gb=1073741824; local units=$kb; local scale="Kb"

    [[ total_size -eq 0 ]] && return
    [[ total_size -ge $mb ]] && { units=$kb; scale="Kb"; }
    [[ total_size -ge $gb ]] && { units=$mb; scale="Mb"; }
    [[ total_size -gt $gb ]] && { units=$gb; scale="Gb"; }

    local completed_size=$(( $(eval ls -l "$directory/$file_name.{1..$chunks}" 2> /dev/null | \
        awk 'BEGIN{s=0}{s+=$5}END{print s}') ))
    local elapsed=$(( $(date +%s) - time ))
    local rate=$(( ( completed_size / elapsed )/units ))
    local pct=$(( ( completed_size*100 ) / total_size ))

    local status
    if [[ $pct -lt 100 ]]; then status="${y}Downloading${s}"; else status="${g}Completed${s}"; fi
    if [[ $action == 'Canceled' ]]; then status="${r}FAILED${s}"; fi

#    # table format
#    printf "%-15b" "$action"
#    printf "%-30s" "$file_name"
#    printf "%6s / %-6s @ %6s %3s/sec (%3s%%)" $((completed_size/units)) $((total_size/units)) $((rate)) $scale $pct
#    printf "%-25b" "......$status"
#    if [[ $action == 'Canceled' ]]; then printf "%40s\n" "[$err]"; fi

    # line format
    local msg
    msg+=$(printf "%-15b" "$action")
    msg+=$(printf "%-30s" "$file_name")
    msg+=$(printf "%6s/%-6s%s @%6s %3s/sec (%3s%%)" $((completed_size/units)) $((total_size/units)) $scale $((rate)) $scale $pct)
    msg+=$(printf "%-25b" "......$status")
    if [[ $action == 'Canceled' ]]; then msg+=$(printf "%40s\n" "[$err]"); fi
    echo -I -n "$msg"
    return 0
}

function downloadFile() {
    local src_dir="$1"
    local dest_dir="$2"
    local file_name="$3"
    local size="$4"
    local chunks=1 # only needed when downloading in multiple parts

    local wrk_dir="$dest_dir/.wrk"
    mkdir -p "$wrk_dir"; chmod 755 "$wrk_dir"
    [[ -d "$wrk_dir" ]] || {
        echo -e "ERROR: Cannot create working directory [$wrk_dir]. Please check permissions";
        exit;
    }

#     [[ $file_name == 'BCDriverMerge.exe' ]] && file_name='*BCDriverMerge.exe' # just for testing
    # curl --write-out "%{http_code}\n" -sS -R --ftp-pasv -u "$USER:$PWD" -o "${wrk_dir}/${file_name}.1" "$src_dir/$file_name" >/dev/shm/fs 2>&1 &
    curl -sS -R --ftp-pasv -u "$USER:$PWD" -o "${wrk_dir}/${file_name}.1" "$src_dir/$file_name" >/dev/shm/fs 2>&1 &

    # Wait for the job to complete while showing progress
    time=$(( $(date +%s)-1 ))
    while jobs | grep -q Running ;
    do
        sleep 1
        showProgress "Processing" "$wrk_dir" "$file_name" "$chunks" "$size" "$time"
        tput ech ${#size} # erase the last reported size value
        tput cub 1000 # move 1000 chars left
    done

    read -r job_response < /dev/shm/fs # get the job actual output
    job_err=$(jobs | awk '/Exit/ {print $3}') # or another way to get just the exit code

    if [[ "$job_err" == '' ]]; then
        showProgress 'Processed' "$wrk_dir" "$file_name" "$chunks" "$size" "$time"
    else
        showProgress 'Canceled' "$wrk_dir" "$file_name" "$chunks" "$size" "$time" "$job_response"
        return 1
    fi
    echo -I # print line separator to complete the progress line

    # todo preserve modification date
    err_msg=$(catchStdErr moveFile "$file_name" "$wrk_dir" "$dest_dir")
#    [[ $? != 0 ]] && { echo "$err_msg"; return 2; }

    return 0
}

function moveFile() {
    local file_name="$1"
    local source_dir="$2"
    local target_dir="$3"

    #Join all the parts # todo preserve the modification times
#    eval cat "$source_dir/$file_name".{1..1} > "$source_dir/$file_name.completed_size"
#    rm -f "$source_dir/$file_name".{1..1}
    mv "${source_dir}/${file_name}.1" "${source_dir}/${file_name}.completed_size" > /dev/null 2>&1

    # just move it if there is no name conflict
    if  [[ "$KEEP" = 'n' ]] || [[ ! -f "$target_dir/$file_name" ]]; then
        err_msg=$(catchStdErr mv "${source_dir}/${file_name}.completed_size" "$target_dir/$file_name")
        [[ $? != 0 ]] && { echo "$err_msg"; return 2; }
        return 0
    fi

    # rename per the options provided
    local overwrite=false

    # if option set to 'auto' check for matching name, size, mod date and overwrite
    if (( $(stat -c%s "$source_dir/$file_name.completed_size") == $(stat -c%s "$target_dir/$file_name") )); then
        local same_size=true
    fi

    local new_file_date="$(date -d "$(stat "$source_dir/$file_name.completed_size" | awk '/Modify/ {print $2" "$3" "$4}')")"
    local curr_file_date="$(date -d "$(stat "$target_dir/$file_name" | awk '/Modify/ {print $2" "$3" "$4}')")"
    if [[ "$new_file_date" = "$curr_file_date" ]] ; then
        local same_date=true
    fi

    if [[ $same_size = "true" ]] && [[ $same_date = "true" ]]; then overwrite=true; fi

    local dest_name=$file_name

    # if option set to 'never' generate new name
    if [[ "$KEEP" = 'y' ]] || [[ $overwrite = "false" ]] ; then
        local i=1
        while [[ -f "$target_dir/$dest_name" ]]; do
            dest_name="${file_name%.*}($(( i++ ))).${file_name##*.}"
        done
    fi

    # move to the final destination using the new file name
    err_msg=$(catchStdErr mv "${source_dir}/${file_name}.completed_size" "$target_dir/$dest_name")
    [[ $? != 0 ]] && { echo "$err_msg"; return 2; }

    return 0
}

function removeRemoteFile() {
    local filepath="/$(echo "$2" | grep / | cut -d/ -f4-)"
    curl --ftp-pasv -s -u "$1" "$2/" -Q "DELE $filepath/$3" 2> /dev/null
}

function checkAndDownload() {
    local url="$1"
    local time="$2"
    local out="$3"
    local -a files

    getDirectoryContent files "$url"
    if [[ $? -ne 0 ]]; then clean "Failed to get directory content"; fi

    getNewFiles files "$url" "$time"
    if [[ $? -ne 0 ]]; then clean "Failed to identify newer files"; fi

    echo -I "Checked location [$url] for files newer than [$(date -d @"$time")] and found ${#files[@]} new files"
    # todo support for parallel download
    # shellcheck disable=SC2068  # gobbling needs to be enabled for the loop
    for f in ${files[@]}; do
        local size=$(getSize "$url/$f")
        downloadFile "$url" "$out" "$f" "$size"
        if [[ $? -ne 0 ]]; then
            (( ERR_FLAG++))
            echo -E -e "${y}Error reported when downloading file $f${s}"
        elif  [[ "$DELETE_REMOTE_FILE" = "y" ]]; then
            err_msg=$(removeRemoteFile "$USER:$PWD" "$url" "$f")
            [[ $? != 0 ]] && { (( ERR_FLAG++)); echo -E -e "Error reported for file $f [$err_msg]"; }
        fi
    done
}

# override bilt in echo to customize logging
# if custom options are not present, normal echo behaviour will be preserved
function echo() {
    if [[ "$1" =~ ^(-[IDWF]) ]]; then log "$@"; else builtin echo "$@"; fi
}

function log() {
    (( LEVEL == 0 )) && return 0

    local severity="$1" && shift

    # only add timestamp at certain levels (needed?)
    (( LEVEL >= 4 )) && stamp="$(date +"[%m-%d %H:%M:%S]")"

    local echo_cmd="builtin echo $stamp "
    [[ $1 =~ (^-[-neE]) ]] && echo_cmd="builtin echo ${BASH_REMATCH[1]} $stamp " && shift

#    echo echo_cmd $severity $echo_cmd $*

    case $severity in
        -D ) (( LEVEL >= 4 )) && $echo_cmd "$*" ;; # print everything
        -I ) (( LEVEL >= 3 )) && $echo_cmd "$*";; # print info
        -W ) (( LEVEL >= 2 )) && $echo_cmd "${y}$*${s}" ;; # print warnings
        -F ) (( LEVEL >= 1 )) && $echo_cmd "${r}$*${s}" ;; # print errors
        * )  (( LEVEL >= 1 )) && $echo_cmd "${r}$*${s}" ;; # print errors by default
    esac
}

function main {
   echo "TBD"
}

###########################
# parse args
###########################
# shellcheck disable=SC2034
CMD_ARGS=("$@")
declare -A ARGS_MAP
parseArgs CMD_ARGS ARGS_MAP

# set log level
LEVEL=${ARGS_MAP[LEVEL]:-2}
LOG=${ARGS_MAP[LOG]:-"$OUT_DIR/log.txt"}

for K in "${!ARGS_MAP[@]}"; do echo -D "[$K] : [${ARGS_MAP[$K]}]"; done

###############################
# wrap all output for logging
###############################
LOGS_ROOT=.
#exec 3>&1 4>&2
#trap 'exec 2>&4 1>&3' 0 1 2 3
#exec 1>log.out 2>&1

(( ! log_init && ! script_init )) && {
    export log_init=1
    exec 3>&1 4>&2
    trap 'exec 2>&4 1>&3' EXIT HUP INT QUIT RETURN

    [[ ! -e "${LOGS_ROOT}/.log" ]] && mkdir "${LOGS_ROOT}/.log"

    # generate log file suffix as preferred
    # printf -v LOG_FILE_NAME_SUFFIX "%(%Y%m%d-%H%M%S-)T$(( RANDOM % 1000 ))" -1
    printf -v LOG_FILE_NAME_SUFFIX "%(%Y_%m_%d)T" -1
    LOG_FILE_NAME="${LOGS_ROOT}/.log/folder-sync.${LOG_FILE_NAME_SUFFIX}.log"

    # re-enter the entire script to wrap and redirect output
    ( (exec "$0" "$@") | tee -a "$LOG_FILE_NAME" 2>&1) 1>&3 2>&4

    exit $?
}
(( script_init++ ))

###########################
# main
###########################
ERR_FLAG=0

# validate required arguments
[[ ${ARGS_MAP[URL]+_} ]] ||  usage "-s | --source"
[[ ${ARGS_MAP[USER]+_} ]] || usage "-u | --user"
[[ ${ARGS_MAP[OUT_DIR]+_} ]] || usage "-d | --dest"

URL="${ARGS_MAP[URL]}"
USER="${ARGS_MAP[USER]}"
DELETE_REMOTE_FILE=${ARGS_MAP[REM_FILE]:-"n"}
KEEP=${ARGS_MAP[KEEP]:-"a"} # yes / no  / only same size & date
CMD=${ARGS_MAP[CMD]:-"START"}

# validate destination
OUT_DIR=${ARGS_MAP[OUT_DIR]}
if [[ ! -d "$OUT_DIR" ]]; then mkdir -p 755 "$OUT_DIR"; chmod 0755 "$OUT_DIR"; fi
[[ -d "$OUT_DIR" ]] || usage "-d | --dest"

# use the provided time marker, latest timestamp in the destination directory or current time (in this order)
CUT_OFF_TIME=${ARGS_MAP[MARKER]:-$(getTimeMarker "$OUT_DIR")}
#getTimeMarker "$OUT_DIR"
#read -r tm < /dev/shm/fs
#CUT_OFF_TIME=${ARGS_MAP[MARKER]:-$tm}

# verify password
PWD="${ARGS_MAP[PWD]}"
[[ -n "$PWD" ]] || getPassword PWD

# set service options
SERVICE=${ARGS_MAP[SERVICE]:-0}
SLEEP=${ARGS_MAP[SLEEP]:-60}

# ansi colors
r='\033[1;31m' ; g='\033[1;32m'; y='\033[1;33m'; s='\033[0;37m'

read -r -d '' LOGO <<- EOM
    \n
    ${g}   ____     __   __       ${y}   ____             ${s}
    ${g}  / __/__  / /__/ /__ ____${y}  / __/_ _____  ____${s}
    ${g} / _// _ \/ / _  / -_) __/${y}  \ \/ // / _ \/ __/${s}
    ${g}/_/  \___/_/\_,_/\__/_/   ${y}/___/\_, /_//_/\__/ ${s}
    ${g}                          ${y}    /___/           ${s}
EOM

echo -I -e "$LOGO"

if [[ "$SERVICE" -eq 1 ]]
then
    echo -I -e "${g}Folder-sync started as background process; use '--stop' option to terminate it.${s}"
    { (
        TIME_MARKER="$CUT_OFF_TIME"
        while /bin/true; do
        checkAndDownload "$URL" "$TIME_MARKER" "$OUT_DIR"
        sleep "$SLEEP"
        TIME_MARKER=$(getTimeMarker "$OUT_DIR") #update time marker
    done &); } 2>&1
else
    echo -I -e "${g}Folder-sync running...${s}"
    checkAndDownload "$URL" "$CUT_OFF_TIME" "$OUT_DIR"
    if [[ $ERR_FLAG -eq 0 ]]
    then
        echo -I -e "${g}Folder-sync completed_size${s}"
    else
        echo -I -e "${y}Folder-sync completed_size with errors${s}"
    fi
    rm -Rf "$OUT_DIR/.wrk"
fi