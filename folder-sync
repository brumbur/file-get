#!/bin/bash

#  Done:
#  1 - от къде да сваля
#  2 - къде да качва  (temp) или в папка на друга машина в мрежата
#  3 - ключ дали да трие сваленото (y/n)
#  4 - възможнжст за стартиране на повече от един скрипт едновремено
#
#  To do:
#  - като екстра за напреднали - да проверява за наличието на стринг в името на файла. Например " BG60" или "BG 60" или "BG_60". Ако има такъв стринг - да качи файла в друга папка (temp1)
#  $ ./folder-sync ftp://pesho:mzprx@192.168.1.1:21/remote/directory ./temp  y/n ("BG60","BG 60","BG_60") ./temp1


###########################
# functions
###########################

# monitor given remote directory and download new files to the target directory
function usage {
  echo -e "Usage:\n\t`basename $0` [source url] [target dir] [delete remote file {default: n}]"
  echo -e "Example:\n\t `basename $0` ftp://pesho:mzprx@192.168.1.1:21/remote/directory /tmp"
  echo -e "\n\t `basename $0` ftp://pesho:mzprx@192.168.1.1:21/remote/directory /tmp y"
  exit 1
}

#Cleanup on kill
function clean {
  echo "Download failed! Cleaning..."
  kill 0
  rm -Rf $OUT_DIR/wrk
  exit 1
}

# get the file details and parse the size
function getSize() {
  local SIZE="`curl -qIL $1 2> /dev/null | awk '/Length/ {print $2}'|grep -o '[0-9]*'`"
  local SIZE=${SIZE:-1}
  echo $SIZE
  return
}

# takes an array reference and updates it with the file names in the given directory
function getDirectoryContent() {
  local -n arr=$1
  local url="$2/"
  local response=`curl -s "$url"`

  if [ $? -eq 0 ]
  then
    echo ""
  else
    echo "ERROR: $?" >&2
    clean
  fi

  arr=($(curl -s "$url" | sed -nr 's/(^-[ rw-].*)( *)([0-9])(.*)/\4/p' | sed -e 's/^ //g' | sed -e 's/ /\ /g'))

  return
}

# takes the complete URL as argument and returns the last modified time
function getSourceLastModifiedDate() {
    local dt=`curl -I "$1" 2>&1 | awk '/Last-Modified:/ {sub("\r",""); print  $2,$3,$4,$5,$6,$7}'`
    local ms="$(date -d "${dt}" '+%s')" # convert to ms
    echo "$ms"
    return
}

function getDestinationLastModifiedDate() {
    local destDir=$1
    local last=`find $destDir -type f -printf '%T@ %p\n' | sort -n | tail -1`

    [ -n "$last" ] || return

    file=(${last// / })
    echo $(date -d "@${file[0]}" '+%s')
    return
}

function getTimeMarker() {
    local destDir=$1
    local last=`find $destDir -type f -printf '%T@ %p\n' | sort -n | tail -1`
    local marker

    if [ -n "$last" ]; then
      marker=`date '+%s'` #current time
    else
      file=(${last// / })
      marker=$(date -d "@${file[0]}" '+%s') # latest download time
    fi

    echo $marker
    return
}

# filters out any files that are older than the cutoff time
function getNewFiles() {
    local -n arr=$1
    local url=$2
    local cutoff=$3
    print "Checking location" $url
    for f in ${arr[@]}; do
        local lmd=$(getSourceLastModifiedDate "$url/$f")
        if [ $cutoff -ge $lmd ]; then
            print "\t(-) $f is old" "skipped"
            arr=("${arr[@]/$f}") # remove old file
        else
          print "\t(+) $f is newer" "downloading"
        fi
    done
    return
}

function calcProgress() {
  # local FNAME=$1
  # local PARTNUM=$2
  # local SZ=$3
  # local T=$4

  [[ $3 -eq 0 ]] && return

  local GOTSIZE=$((`eval ls -l "$1".{1..$2} 2> /dev/null | awk 'BEGIN{SUM=0}{SUM=SUM+$5}END{print SUM}'`))
  local TIMEDIFF=$(( `date +%s` - $4 ))
  local RATE=$(( ($GOTSIZE / $TIMEDIFF)/1024 ))
  local PCT=$(( ($GOTSIZE*100) / $3 ))

  echo "Downloading $1 in $2 parts: $(($GOTSIZE/1048576)) / $(($3/1048576)) mb @ $(($RATE)) KB/s ($PCT%).    "

  return
}

function download() {
  local SRC="$1"
  local DEST="$2"
  local NAME="$3"
  local SIZE=$4
  local SPLIT_NUM=1

  WRK_DIR="$DEST/wrk"
  `mkdir -p -m 755 "$WRK_DIR"`

  curl -R --ftp-pasv -o "${WRK_DIR}/${NAME}.1" "$SRC/$NAME" 2> /dev/null &

  # Wait for the job to complete while showing progress
  TIME=$((`date +%s`-1))
  while jobs | grep -q Running ; do
    echo -n $(calcProgress "${WRK_DIR}/${NAME}.1" $SPLIT_NUM $SIZE $TIME)
    tput ech ${#SIZE} # erase the last reported size value
    tput cub 1000 # move 1000 chars left
    sleep 1
  done

  echo $(calcProgress "${WRK_DIR}/${NAME}.1" $SPLIT_NUM $SIZE $TIME)

  `mv "${WRK_DIR}/${NAME}.1" "$DEST/$NAME"`

  if [ $? -eq 0 ]
  then
    echo "Download completed! Check file in $DEST"
    local file_path=$(echo ${SRC} | cut -d@ -f2 | cut -d/ -f2- | cut -d? -f1)
    [ $DELETE_REMOTE_FILE = "y" ] && `curl $SRC -Q"DELE $file_path/$NAME" 2> /dev/null`
  else
    echo "Could not download file: $?" >&2
    clean
  fi
}

function print() {
  echo -e "$1 [$2]"
}

# cygwin needs to have procps-ng package to support pgrep (https://cygwin.com/packages/summary/procps-ng.html)
function getcpid() {
    cpids=`pgrep -P $1|xargs`

    for cpid in $cpids;
    do
        echo "$cpid"
        getcpid $cpid
    done
}

###########################
# main
###########################

URL=$1
OUT_DIR=${2:-"/tmp"}
DELETE_REMOTE_FILE=${3:-"n"}
CUT_OFF_TIME="$(date -d "$4" '+%s')" # time in epoch milliseconds
SLEEP="60"

#Check parameters
if [ ! "$1" ] ; then
  echo "source url with user credentials and the directory is required"
  usage
fi

if [ ! "$2" ] ; then
  echo "target dir is required"
  usage
fi

# use the timestamp of the last file we downloaded or if we cant find any, assume from now
CUT_OFF_TIME=$(getTimeMarker $OUT_DIR)

# add verbose mode
print "URL" $URL
print "OUT_DIR" $OUT_DIR
print "DELETE_REMOTE_FILE" $DELETE_REMOTE_FILE
print "CUT_OFF_TIME" "$(date -d "@$CUT_OFF_TIME")"

#Trap
trap clean SIGINT SIGTERM
trap "exit" INT TERM ERR
trap "kill 0" EXIT

declare -a files

# background loop
while /bin/true; do
  CUT_OFF_TIME=$(getTimeMarker $OUT_DIR)
  print "Checking for new files as off" "$(date -d @$CUT_OFF_TIME)"
  getDirectoryContent files $URL
  getNewFiles files $URL $CUT_OFF_TIME

  for NAME in ${files[@]}; do
    FILE_SIZE=$(getSize "$URL/$f")
    echo "Downloading $NAME with size $FILE_SIZE"
    download "$URL" "$OUT_DIR" "$NAME" $FILE_SIZE
  done

  rm -Rf "$OUT_DIR/wrk"
  sleep $SLEEP
done &

# cygwin needs to have procps-ng package to support pgrep (https://cygwin.com/packages/summary/procps-ng.html)
#echo "$BASHPID Started the job with PID $(getcpid $BASHPID)"

# cygwin does not support ps -x
#echo "PPID `ps -axf | grep $BASHPID`"

echo "Parent PID [$BASHPID] will wait on the background job"
echo "To STOP use Ctrl-C"

wait
